// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientHealth.DataBase;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231203150135_AddDocument")]
    partial class AddDocument
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebApi.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("402d2cc4-1ef7-46e2-a047-1774647ffcf8"),
                            Email = "vitalii.heorhiievskyi.pz.2020@lpnu.ua",
                            Name = "Dr. Smith"
                        },
                        new
                        {
                            Id = new Guid("5c9c61dd-5f36-446f-a4b5-a4395ef2787b"),
                            Email = "vitalii.heorhiievskyi.pz.2020@lpnu.ua",
                            Name = "Dr. White"
                        },
                        new
                        {
                            Id = new Guid("e921f5a3-08cf-46bb-9315-bdfa5938a53a"),
                            Email = "vitalii.heorhiievskyi.pz.2020@lpnu.ua",
                            Name = "Dr. Green"
                        },
                        new
                        {
                            Id = new Guid("b6d6e9ce-32a6-49fa-9a78-a0c96dfbe5a1"),
                            Email = "vitalii.heorhiievskyi.pz.2020@lpnu.ua",
                            Name = "Dr. Jones"
                        },
                        new
                        {
                            Id = new Guid("b40930dd-49db-4e62-aeb9-0be4809becb4"),
                            Email = "vitalii.heorhiievskyi.pz.2020@lpnu.ua",
                            Name = "Dr. Laura Garcia"
                        });
                });

            modelBuilder.Entity("WebApi.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1e064dc-c716-4380-9d47-ed632a2c0a64"),
                            Description = "Medical card with all needed info",
                            IsVerified = true,
                            Name = "Medical card",
                            PatientId = new Guid("784fe36b-4aaf-4430-bbea-2089f81b753b"),
                            UploadDate = new DateTime(2022, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "No Url"
                        });
                });

            modelBuilder.Entity("WebApi.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Regularity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("260df0ed-2662-497b-8730-5f60856bc7f9"),
                            Date = new DateTime(2023, 12, 4, 17, 1, 35, 61, DateTimeKind.Local).AddTicks(1772),
                            Description = "Don't forget your appointment tomorrow at 10 AM.",
                            DoctorId = new Guid("402d2cc4-1ef7-46e2-a047-1774647ffcf8"),
                            Duration = 30,
                            Label = "Appointment Reminder",
                            PatientId = new Guid("b8879171-fab7-4342-8171-82b7900e6f4c"),
                            Regularity = "Once",
                            Status = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("5ddf3f92-d650-420e-af0f-133090dec775"),
                            Date = new DateTime(2023, 12, 3, 23, 1, 35, 61, DateTimeKind.Local).AddTicks(1818),
                            Description = "Time to take your medication.",
                            DoctorId = new Guid("402d2cc4-1ef7-46e2-a047-1774647ffcf8"),
                            Duration = 0,
                            Label = "Medication Reminder",
                            PatientId = new Guid("b8879171-fab7-4342-8171-82b7900e6f4c"),
                            Regularity = "Daily",
                            Status = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("41b1f610-3fc2-42d7-85a5-fc3894baea8c"),
                            Date = new DateTime(2023, 12, 5, 17, 1, 35, 61, DateTimeKind.Local).AddTicks(1825),
                            Description = "Your recent lab results are ready for review.",
                            DoctorId = new Guid("402d2cc4-1ef7-46e2-a047-1774647ffcf8"),
                            Duration = 0,
                            Label = "Lab Results",
                            PatientId = new Guid("b8879171-fab7-4342-8171-82b7900e6f4c"),
                            Regularity = "Once",
                            Status = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("32b4acd7-b0d1-4156-a77d-3b871c70074e"),
                            Date = new DateTime(2023, 12, 10, 17, 1, 35, 61, DateTimeKind.Local).AddTicks(1833),
                            Description = "Remember to schedule your follow-up appointment.",
                            DoctorId = new Guid("402d2cc4-1ef7-46e2-a047-1774647ffcf8"),
                            Duration = 0,
                            Label = "Follow-up Reminder",
                            PatientId = new Guid("7a47b2ab-1983-4c1f-b498-bf6b57fbb18d"),
                            Regularity = "Once",
                            Status = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("b6026409-6370-4131-a6c9-d75e2fac48fa"),
                            Date = new DateTime(2023, 12, 6, 17, 1, 35, 61, DateTimeKind.Local).AddTicks(1839),
                            Description = "Check out the latest health tips on our website.",
                            Duration = 0,
                            Label = "Health Tips",
                            PatientId = new Guid("7a47b2ab-1983-4c1f-b498-bf6b57fbb18d"),
                            Regularity = "Weekly",
                            Status = 1,
                            Type = 1
                        });
                });

            modelBuilder.Entity("WebApi.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8879171-fab7-4342-8171-82b7900e6f4c"),
                            Address = "123 Main St, Anytown, USA",
                            BirthDate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "password1",
                            PhoneNumber = "123-456-7890",
                            Sex = 0
                        },
                        new
                        {
                            Id = new Guid("7a47b2ab-1983-4c1f-b498-bf6b57fbb18d"),
                            Address = "456 Elm St, Othertown, USA",
                            BirthDate = new DateTime(1990, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "password2",
                            PhoneNumber = "234-567-8901",
                            Sex = 1
                        },
                        new
                        {
                            Id = new Guid("784fe36b-4aaf-4430-bbea-2089f81b753b"),
                            Address = "123 Main St",
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "hashed_password",
                            PhoneNumber = "123-456-7890",
                            Sex = 0
                        });
                });

            modelBuilder.Entity("WebApi.Models.Document", b =>
                {
                    b.HasOne("WebApi.Models.Patient", "Patient")
                        .WithMany("Documents")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("WebApi.Models.Notification", b =>
                {
                    b.HasOne("WebApi.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("WebApi.Models.Patient", "Patient")
                        .WithMany("Notifications")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("WebApi.Models.Patient", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
