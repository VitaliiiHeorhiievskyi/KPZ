// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientHealth.DataBase;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebApi.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("402d2cc4-1ef7-46e2-a047-1774647ffcf8"),
                            Email = "vitalii.heorhiievskyi.pz.2020@lpnu.ua",
                            Name = "Dr. Smith"
                        },
                        new
                        {
                            Id = new Guid("492b15af-940d-46b5-b1c3-b26d8f39dbce"),
                            Email = "vitalii.heorhiievskyi.pz.2020@lpnu.ua",
                            Name = "Dr. White"
                        },
                        new
                        {
                            Id = new Guid("aa9ba29d-f966-45cc-a246-dcd996e27b55"),
                            Email = "vitalii.heorhiievskyi.pz.2020@lpnu.ua",
                            Name = "Dr. Green"
                        },
                        new
                        {
                            Id = new Guid("a0f3553e-79c9-4f7d-9b49-b75a28b660ff"),
                            Email = "vitalii.heorhiievskyi.pz.2020@lpnu.ua",
                            Name = "Dr. Jones"
                        },
                        new
                        {
                            Id = new Guid("67927bcc-2d9e-4e6c-b648-b2de80c57aaa"),
                            Email = "vitalii.heorhiievskyi.pz.2020@lpnu.ua",
                            Name = "Dr. Laura Garcia"
                        });
                });

            modelBuilder.Entity("WebApi.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("adea6f5d-1ad8-48c6-9eb3-353bd45f48d1"),
                            Description = "Medical card with all needed info",
                            IsVerified = true,
                            Name = "Medical card",
                            PatientId = new Guid("b8879171-fab7-4342-8171-82b7900e6f4c"),
                            UploadDate = new DateTime(2022, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "No Url"
                        });
                });

            modelBuilder.Entity("WebApi.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Regularity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06a17de2-4f0a-47f0-8340-68e46a4e9c00"),
                            Date = new DateTime(2023, 12, 11, 20, 41, 24, 823, DateTimeKind.Local).AddTicks(1759),
                            Description = "Don't forget your appointment tomorrow at 10 AM.",
                            DoctorId = new Guid("402d2cc4-1ef7-46e2-a047-1774647ffcf8"),
                            Duration = 30,
                            Label = "Appointment Reminder",
                            PatientId = new Guid("b8879171-fab7-4342-8171-82b7900e6f4c"),
                            Regularity = "Once",
                            Status = "ACTIVE",
                            Type = "PRESCRIPTION"
                        },
                        new
                        {
                            Id = new Guid("31715aca-f93b-436c-a1b7-3ef8b89e453b"),
                            Date = new DateTime(2023, 12, 11, 2, 41, 24, 823, DateTimeKind.Local).AddTicks(1797),
                            Description = "Time to take your medication.",
                            DoctorId = new Guid("402d2cc4-1ef7-46e2-a047-1774647ffcf8"),
                            Duration = 0,
                            Label = "Medication Reminder",
                            PatientId = new Guid("b8879171-fab7-4342-8171-82b7900e6f4c"),
                            Regularity = "Daily",
                            Status = "REJECTED",
                            Type = "APPOINTMENT"
                        },
                        new
                        {
                            Id = new Guid("ecf6bde1-a708-4dbb-8678-08bf168019c1"),
                            Date = new DateTime(2023, 12, 12, 20, 41, 24, 823, DateTimeKind.Local).AddTicks(1802),
                            Description = "Your recent lab results are ready for review.",
                            DoctorId = new Guid("402d2cc4-1ef7-46e2-a047-1774647ffcf8"),
                            Duration = 0,
                            Label = "Lab Results",
                            PatientId = new Guid("b8879171-fab7-4342-8171-82b7900e6f4c"),
                            Regularity = "Once",
                            Status = "ACTIVE",
                            Type = "PRESCRIPTION"
                        },
                        new
                        {
                            Id = new Guid("462a3cf7-a79e-4dd9-b4de-c9994ab80bab"),
                            Date = new DateTime(2023, 12, 17, 20, 41, 24, 823, DateTimeKind.Local).AddTicks(1806),
                            Description = "Remember to schedule your follow-up appointment.",
                            DoctorId = new Guid("402d2cc4-1ef7-46e2-a047-1774647ffcf8"),
                            Duration = 0,
                            Label = "Follow-up Reminder",
                            PatientId = new Guid("7a47b2ab-1983-4c1f-b498-bf6b57fbb18d"),
                            Regularity = "Once",
                            Status = "PENDING",
                            Type = "APPOINTMENT"
                        },
                        new
                        {
                            Id = new Guid("eda713d1-a1a6-4c07-a1a5-43248b7b0e87"),
                            Date = new DateTime(2023, 12, 13, 20, 41, 24, 823, DateTimeKind.Local).AddTicks(1811),
                            Description = "Check out the latest health tips on our website.",
                            Duration = 0,
                            Label = "Health Tips",
                            PatientId = new Guid("7a47b2ab-1983-4c1f-b498-bf6b57fbb18d"),
                            Regularity = "Weekly",
                            Status = "REJECTED",
                            Type = "PRESCRIPTION"
                        });
                });

            modelBuilder.Entity("WebApi.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8879171-fab7-4342-8171-82b7900e6f4c"),
                            AddressId = new Guid("f04cd751-3fa2-4e73-86f4-a15ef896c7e6"),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "password1",
                            PhoneNumber = "123-456-7890",
                            Sex = 0
                        },
                        new
                        {
                            Id = new Guid("7a47b2ab-1983-4c1f-b498-bf6b57fbb18d"),
                            AddressId = new Guid("234208f7-43a3-4855-b01c-8dab74fdb46d"),
                            DateOfBirth = new DateTime(1990, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "password2",
                            PhoneNumber = "234-567-8901",
                            Sex = 1
                        });
                });

            modelBuilder.Entity("WebApi.Models.PatientAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PatientAddresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f04cd751-3fa2-4e73-86f4-a15ef896c7e6"),
                            Address = "123 Main St",
                            City = "Anytown",
                            Country = "USA"
                        },
                        new
                        {
                            Id = new Guid("234208f7-43a3-4855-b01c-8dab74fdb46d"),
                            Address = "456 Elm St",
                            City = "Othertown",
                            Country = "USA"
                        });
                });

            modelBuilder.Entity("WebApi.Models.Document", b =>
                {
                    b.HasOne("WebApi.Models.Patient", "Patient")
                        .WithMany("Documents")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("WebApi.Models.Notification", b =>
                {
                    b.HasOne("WebApi.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("WebApi.Models.Patient", "Patient")
                        .WithMany("Notifications")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("WebApi.Models.Patient", b =>
                {
                    b.HasOne("WebApi.Models.PatientAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("WebApi.Models.Patient", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
